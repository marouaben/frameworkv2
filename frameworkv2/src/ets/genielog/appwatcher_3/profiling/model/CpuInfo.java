// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpuInfo.proto

package ets.genielog.appwatcher_3.profiling.model;

public final class CpuInfo {
	private CpuInfo() {
	}

	public static void registerAllExtensions(
			com.google.protobuf.ExtensionRegistry registry) {
	}

	public interface cpuInfoOrBuilder extends
			com.google.protobuf.MessageOrBuilder {

		// required uint64 userTime = 1;
		/**
		 * <code>required uint64 userTime = 1;</code>
		 * 
		 * <pre>
		 * * normal processes executing in user mode
		 * </pre>
		 */
		boolean hasUserTime();

		/**
		 * <code>required uint64 userTime = 1;</code>
		 * 
		 * <pre>
		 * * normal processes executing in user mode
		 * </pre>
		 */
		long getUserTime();

		// required uint64 niceTime = 2;
		/**
		 * <code>required uint64 niceTime = 2;</code>
		 * 
		 * <pre>
		 * * niced processes executing in user mode
		 * </pre>
		 */
		boolean hasNiceTime();

		/**
		 * <code>required uint64 niceTime = 2;</code>
		 * 
		 * <pre>
		 * * niced processes executing in user mode
		 * </pre>
		 */
		long getNiceTime();

		// required uint64 systemTime = 3;
		/**
		 * <code>required uint64 systemTime = 3;</code>
		 * 
		 * <pre>
		 * * processes executing in kernel mode
		 * </pre>
		 */
		boolean hasSystemTime();

		/**
		 * <code>required uint64 systemTime = 3;</code>
		 * 
		 * <pre>
		 * * processes executing in kernel mode
		 * </pre>
		 */
		long getSystemTime();

		// required uint64 idleTime = 4;
		/**
		 * <code>required uint64 idleTime = 4;</code>
		 * 
		 * <pre>
		 * * twiddling thumbs
		 * </pre>
		 */
		boolean hasIdleTime();

		/**
		 * <code>required uint64 idleTime = 4;</code>
		 * 
		 * <pre>
		 * * twiddling thumbs
		 * </pre>
		 */
		long getIdleTime();

		// required uint64 ioWaitTime = 5;
		/**
		 * <code>required uint64 ioWaitTime = 5;</code>
		 * 
		 * <pre>
		 * * waiting for I/O to complete
		 * </pre>
		 */
		boolean hasIoWaitTime();

		/**
		 * <code>required uint64 ioWaitTime = 5;</code>
		 * 
		 * <pre>
		 * * waiting for I/O to complete
		 * </pre>
		 */
		long getIoWaitTime();

		// required uint64 irqTime = 6;
		/**
		 * <code>required uint64 irqTime = 6;</code>
		 * 
		 * <pre>
		 * * servicing interrupts
		 * </pre>
		 */
		boolean hasIrqTime();

		/**
		 * <code>required uint64 irqTime = 6;</code>
		 * 
		 * <pre>
		 * * servicing interrupts
		 * </pre>
		 */
		long getIrqTime();

		// required uint64 softIRQTime = 7;
		/**
		 * <code>required uint64 softIRQTime = 7;</code>
		 * 
		 * <pre>
		 * * servicing softirqs
		 * </pre>
		 */
		boolean hasSoftIRQTime();

		/**
		 * <code>required uint64 softIRQTime = 7;</code>
		 * 
		 * <pre>
		 * * servicing softirqs
		 * </pre>
		 */
		long getSoftIRQTime();

		// required float cpuUtilization = 8;
		/**
		 * <code>required float cpuUtilization = 8;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		boolean hasCpuUtilization();

		/**
		 * <code>required float cpuUtilization = 8;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		float getCpuUtilization();

		// required float IoUtilization = 9;
		/**
		 * <code>required float IoUtilization = 9;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		boolean hasIoUtilization();

		/**
		 * <code>required float IoUtilization = 9;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		float getIoUtilization();

		// required uint64 cpuTime = 10;
		/**
		 * <code>required uint64 cpuTime = 10;</code>
		 * 
		 * <pre>
		 * * CPU Time
		 * </pre>
		 */
		boolean hasCpuTime();

		/**
		 * <code>required uint64 cpuTime = 10;</code>
		 * 
		 * <pre>
		 * * CPU Time
		 * </pre>
		 */
		long getCpuTime();

		// optional uint32 cpuNumber = 11;
		/**
		 * <code>optional uint32 cpuNumber = 11;</code>
		 * 
		 * <pre>
		 * * CPU Number
		 * </pre>
		 */
		boolean hasCpuNumber();

		/**
		 * <code>optional uint32 cpuNumber = 11;</code>
		 * 
		 * <pre>
		 * * CPU Number
		 * </pre>
		 */
		int getCpuNumber();

		// optional bool offLine = 12;
		/**
		 * <code>optional bool offLine = 12;</code>
		 * 
		 * <pre>
		 * * CPU Offline
		 * </pre>
		 */
		boolean hasOffLine();

		/**
		 * <code>optional bool offLine = 12;</code>
		 * 
		 * <pre>
		 * * CPU Offline
		 * </pre>
		 */
		boolean getOffLine();
	}

	/**
	 * Protobuf type {@code com.android.alexdet.profiler.core.cpuInfo}
	 */
	public static final class cpuInfo extends
			com.google.protobuf.GeneratedMessage implements cpuInfoOrBuilder {
		// Use cpuInfo.newBuilder() to construct.
		private cpuInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
			super(builder);
			this.unknownFields = builder.getUnknownFields();
		}

		private cpuInfo(boolean noInit) {
			this.unknownFields = com.google.protobuf.UnknownFieldSet
					.getDefaultInstance();
		}

		private static final cpuInfo defaultInstance;

		public static cpuInfo getDefaultInstance() {
			return defaultInstance;
		}

		public cpuInfo getDefaultInstanceForType() {
			return defaultInstance;
		}

		private final com.google.protobuf.UnknownFieldSet unknownFields;

		@java.lang.Override
		public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}

		private cpuInfo(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			initFields();
			// int mutable_bitField0_ = 0;
			com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
					.newBuilder();
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
					case 0:
						done = true;
						break;
					default: {
						if (!parseUnknownField(input, unknownFields,
								extensionRegistry, tag)) {
							done = true;
						}
						break;
					}
					case 8: {
						bitField0_ |= 0x00000001;
						userTime_ = input.readUInt64();
						break;
					}
					case 16: {
						bitField0_ |= 0x00000002;
						niceTime_ = input.readUInt64();
						break;
					}
					case 24: {
						bitField0_ |= 0x00000004;
						systemTime_ = input.readUInt64();
						break;
					}
					case 32: {
						bitField0_ |= 0x00000008;
						idleTime_ = input.readUInt64();
						break;
					}
					case 40: {
						bitField0_ |= 0x00000010;
						ioWaitTime_ = input.readUInt64();
						break;
					}
					case 48: {
						bitField0_ |= 0x00000020;
						irqTime_ = input.readUInt64();
						break;
					}
					case 56: {
						bitField0_ |= 0x00000040;
						softIRQTime_ = input.readUInt64();
						break;
					}
					case 69: {
						bitField0_ |= 0x00000080;
						cpuUtilization_ = input.readFloat();
						break;
					}
					case 77: {
						bitField0_ |= 0x00000100;
						ioUtilization_ = input.readFloat();
						break;
					}
					case 80: {
						bitField0_ |= 0x00000200;
						cpuTime_ = input.readUInt64();
						break;
					}
					case 88: {
						bitField0_ |= 0x00000400;
						cpuNumber_ = input.readUInt32();
						break;
					}
					case 96: {
						bitField0_ |= 0x00000800;
						offLine_ = input.readBool();
						break;
					}
					}
				}
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(
						e.getMessage()).setUnfinishedMessage(this);
			} finally {
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}

		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return ets.genielog.appwatcher_3.profiling.model.CpuInfo.internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor;
		}

		protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
			return ets.genielog.appwatcher_3.profiling.model.CpuInfo.internal_static_com_android_alexdet_profiler_core_cpuInfo_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo.class,
							ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo.Builder.class);
		}

		public static com.google.protobuf.Parser<cpuInfo> PARSER = new com.google.protobuf.AbstractParser<cpuInfo>() {
			public cpuInfo parsePartialFrom(
					com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry)
					throws com.google.protobuf.InvalidProtocolBufferException {
				return new cpuInfo(input, extensionRegistry);
			}
		};

		@java.lang.Override
		public com.google.protobuf.Parser<cpuInfo> getParserForType() {
			return PARSER;
		}

		private int bitField0_;
		// required uint64 userTime = 1;
		public static final int USERTIME_FIELD_NUMBER = 1;
		private long userTime_;

		/**
		 * <code>required uint64 userTime = 1;</code>
		 * 
		 * <pre>
		 * * normal processes executing in user mode
		 * </pre>
		 */
		public boolean hasUserTime() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}

		/**
		 * <code>required uint64 userTime = 1;</code>
		 * 
		 * <pre>
		 * * normal processes executing in user mode
		 * </pre>
		 */
		public long getUserTime() {
			return userTime_;
		}

		// required uint64 niceTime = 2;
		public static final int NICETIME_FIELD_NUMBER = 2;
		private long niceTime_;

		/**
		 * <code>required uint64 niceTime = 2;</code>
		 * 
		 * <pre>
		 * * niced processes executing in user mode
		 * </pre>
		 */
		public boolean hasNiceTime() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}

		/**
		 * <code>required uint64 niceTime = 2;</code>
		 * 
		 * <pre>
		 * * niced processes executing in user mode
		 * </pre>
		 */
		public long getNiceTime() {
			return niceTime_;
		}

		// required uint64 systemTime = 3;
		public static final int SYSTEMTIME_FIELD_NUMBER = 3;
		private long systemTime_;

		/**
		 * <code>required uint64 systemTime = 3;</code>
		 * 
		 * <pre>
		 * * processes executing in kernel mode
		 * </pre>
		 */
		public boolean hasSystemTime() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}

		/**
		 * <code>required uint64 systemTime = 3;</code>
		 * 
		 * <pre>
		 * * processes executing in kernel mode
		 * </pre>
		 */
		public long getSystemTime() {
			return systemTime_;
		}

		// required uint64 idleTime = 4;
		public static final int IDLETIME_FIELD_NUMBER = 4;
		private long idleTime_;

		/**
		 * <code>required uint64 idleTime = 4;</code>
		 * 
		 * <pre>
		 * * twiddling thumbs
		 * </pre>
		 */
		public boolean hasIdleTime() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}

		/**
		 * <code>required uint64 idleTime = 4;</code>
		 * 
		 * <pre>
		 * * twiddling thumbs
		 * </pre>
		 */
		public long getIdleTime() {
			return idleTime_;
		}

		// required uint64 ioWaitTime = 5;
		public static final int IOWAITTIME_FIELD_NUMBER = 5;
		private long ioWaitTime_;

		/**
		 * <code>required uint64 ioWaitTime = 5;</code>
		 * 
		 * <pre>
		 * * waiting for I/O to complete
		 * </pre>
		 */
		public boolean hasIoWaitTime() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}

		/**
		 * <code>required uint64 ioWaitTime = 5;</code>
		 * 
		 * <pre>
		 * * waiting for I/O to complete
		 * </pre>
		 */
		public long getIoWaitTime() {
			return ioWaitTime_;
		}

		// required uint64 irqTime = 6;
		public static final int IRQTIME_FIELD_NUMBER = 6;
		private long irqTime_;

		/**
		 * <code>required uint64 irqTime = 6;</code>
		 * 
		 * <pre>
		 * * servicing interrupts
		 * </pre>
		 */
		public boolean hasIrqTime() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}

		/**
		 * <code>required uint64 irqTime = 6;</code>
		 * 
		 * <pre>
		 * * servicing interrupts
		 * </pre>
		 */
		public long getIrqTime() {
			return irqTime_;
		}

		// required uint64 softIRQTime = 7;
		public static final int SOFTIRQTIME_FIELD_NUMBER = 7;
		private long softIRQTime_;

		/**
		 * <code>required uint64 softIRQTime = 7;</code>
		 * 
		 * <pre>
		 * * servicing softirqs
		 * </pre>
		 */
		public boolean hasSoftIRQTime() {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		}

		/**
		 * <code>required uint64 softIRQTime = 7;</code>
		 * 
		 * <pre>
		 * * servicing softirqs
		 * </pre>
		 */
		public long getSoftIRQTime() {
			return softIRQTime_;
		}

		// required float cpuUtilization = 8;
		public static final int CPUUTILIZATION_FIELD_NUMBER = 8;
		private float cpuUtilization_;

		/**
		 * <code>required float cpuUtilization = 8;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		public boolean hasCpuUtilization() {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		}

		/**
		 * <code>required float cpuUtilization = 8;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		public float getCpuUtilization() {
			return cpuUtilization_;
		}

		// required float IoUtilization = 9;
		public static final int IOUTILIZATION_FIELD_NUMBER = 9;
		private float ioUtilization_;

		/**
		 * <code>required float IoUtilization = 9;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		public boolean hasIoUtilization() {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		}

		/**
		 * <code>required float IoUtilization = 9;</code>
		 * 
		 * <pre>
		 * * CPU utilization
		 * </pre>
		 */
		public float getIoUtilization() {
			return ioUtilization_;
		}

		// required uint64 cpuTime = 10;
		public static final int CPUTIME_FIELD_NUMBER = 10;
		private long cpuTime_;

		/**
		 * <code>required uint64 cpuTime = 10;</code>
		 * 
		 * <pre>
		 * * CPU Time
		 * </pre>
		 */
		public boolean hasCpuTime() {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		}

		/**
		 * <code>required uint64 cpuTime = 10;</code>
		 * 
		 * <pre>
		 * * CPU Time
		 * </pre>
		 */
		public long getCpuTime() {
			return cpuTime_;
		}

		// optional uint32 cpuNumber = 11;
		public static final int CPUNUMBER_FIELD_NUMBER = 11;
		private int cpuNumber_;

		/**
		 * <code>optional uint32 cpuNumber = 11;</code>
		 * 
		 * <pre>
		 * * CPU Number
		 * </pre>
		 */
		public boolean hasCpuNumber() {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		}

		/**
		 * <code>optional uint32 cpuNumber = 11;</code>
		 * 
		 * <pre>
		 * * CPU Number
		 * </pre>
		 */
		public int getCpuNumber() {
			return cpuNumber_;
		}

		// optional bool offLine = 12;
		public static final int OFFLINE_FIELD_NUMBER = 12;
		private boolean offLine_;

		/**
		 * <code>optional bool offLine = 12;</code>
		 * 
		 * <pre>
		 * * CPU Offline
		 * </pre>
		 */
		public boolean hasOffLine() {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		}

		/**
		 * <code>optional bool offLine = 12;</code>
		 * 
		 * <pre>
		 * * CPU Offline
		 * </pre>
		 */
		public boolean getOffLine() {
			return offLine_;
		}

		private void initFields() {
			userTime_ = 0L;
			niceTime_ = 0L;
			systemTime_ = 0L;
			idleTime_ = 0L;
			ioWaitTime_ = 0L;
			irqTime_ = 0L;
			softIRQTime_ = 0L;
			cpuUtilization_ = 0F;
			ioUtilization_ = 0F;
			cpuTime_ = 0L;
			cpuNumber_ = 0;
			offLine_ = false;
		}

		private byte memoizedIsInitialized = -1;

		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if (isInitialized != -1)
				return isInitialized == 1;

			if (!hasUserTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasNiceTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasSystemTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIdleTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIoWaitTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIrqTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasSoftIRQTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasCpuUtilization()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIoUtilization()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasCpuTime()) {
				memoizedIsInitialized = 0;
				return false;
			}
			memoizedIsInitialized = 1;
			return true;
		}

		public void writeTo(com.google.protobuf.CodedOutputStream output)
				throws java.io.IOException {
			getSerializedSize();
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				output.writeUInt64(1, userTime_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				output.writeUInt64(2, niceTime_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				output.writeUInt64(3, systemTime_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				output.writeUInt64(4, idleTime_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				output.writeUInt64(5, ioWaitTime_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				output.writeUInt64(6, irqTime_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				output.writeUInt64(7, softIRQTime_);
			}
			if (((bitField0_ & 0x00000080) == 0x00000080)) {
				output.writeFloat(8, cpuUtilization_);
			}
			if (((bitField0_ & 0x00000100) == 0x00000100)) {
				output.writeFloat(9, ioUtilization_);
			}
			if (((bitField0_ & 0x00000200) == 0x00000200)) {
				output.writeUInt64(10, cpuTime_);
			}
			if (((bitField0_ & 0x00000400) == 0x00000400)) {
				output.writeUInt32(11, cpuNumber_);
			}
			if (((bitField0_ & 0x00000800) == 0x00000800)) {
				output.writeBool(12, offLine_);
			}
			getUnknownFields().writeTo(output);
		}

		private int memoizedSerializedSize = -1;

		public int getSerializedSize() {
			int size = memoizedSerializedSize;
			if (size != -1)
				return size;

			size = 0;
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(1, userTime_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(2, niceTime_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(3, systemTime_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(4, idleTime_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(5, ioWaitTime_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(6, irqTime_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(7, softIRQTime_);
			}
			if (((bitField0_ & 0x00000080) == 0x00000080)) {
				size += com.google.protobuf.CodedOutputStream.computeFloatSize(
						8, cpuUtilization_);
			}
			if (((bitField0_ & 0x00000100) == 0x00000100)) {
				size += com.google.protobuf.CodedOutputStream.computeFloatSize(
						9, ioUtilization_);
			}
			if (((bitField0_ & 0x00000200) == 0x00000200)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt64Size(10, cpuTime_);
			}
			if (((bitField0_ & 0x00000400) == 0x00000400)) {
				size += com.google.protobuf.CodedOutputStream
						.computeUInt32Size(11, cpuNumber_);
			}
			if (((bitField0_ & 0x00000800) == 0x00000800)) {
				size += com.google.protobuf.CodedOutputStream.computeBoolSize(
						12, offLine_);
			}
			size += getUnknownFields().getSerializedSize();
			memoizedSerializedSize = size;
			return size;
		}

		private static final long serialVersionUID = 0L;

		@java.lang.Override
		protected java.lang.Object writeReplace()
				throws java.io.ObjectStreamException {
			return super.writeReplace();
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				com.google.protobuf.ByteString data)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				com.google.protobuf.ByteString data,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(byte[] data)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(byte[] data,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				java.io.InputStream input) throws java.io.IOException {
			return PARSER.parseFrom(input);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				java.io.InputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return PARSER.parseFrom(input, extensionRegistry);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseDelimitedFrom(
				java.io.InputStream input) throws java.io.IOException {
			return PARSER.parseDelimitedFrom(input);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseDelimitedFrom(
				java.io.InputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return PARSER.parseDelimitedFrom(input, extensionRegistry);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				com.google.protobuf.CodedInputStream input)
				throws java.io.IOException {
			return PARSER.parseFrom(input);
		}

		public static ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parseFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return PARSER.parseFrom(input, extensionRegistry);
		}

		public static Builder newBuilder() {
			return Builder.create();
		}

		public Builder newBuilderForType() {
			return newBuilder();
		}

		public static Builder newBuilder(
				ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo prototype) {
			return newBuilder().mergeFrom(prototype);
		}

		public Builder toBuilder() {
			return newBuilder(this);
		}

		@java.lang.Override
		protected Builder newBuilderForType(
				com.google.protobuf.GeneratedMessage.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}

		/**
		 * Protobuf type {@code com.android.alexdet.profiler.core.cpuInfo}
		 */
		public static final class Builder extends
				com.google.protobuf.GeneratedMessage.Builder<Builder> implements
				ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfoOrBuilder {
			public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
				return ets.genielog.appwatcher_3.profiling.model.CpuInfo.internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor;
			}

			protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return ets.genielog.appwatcher_3.profiling.model.CpuInfo.internal_static_com_android_alexdet_profiler_core_cpuInfo_fieldAccessorTable
						.ensureFieldAccessorsInitialized(
								ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo.class,
								ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo.Builder.class);
			}

			// Construct using
			// com.android.alexdet.profiler.core.CpuInfo.cpuInfo.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}

			private Builder(
					com.google.protobuf.GeneratedMessage.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}

			private void maybeForceBuilderInitialization() {
				if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
				}
			}

			private static Builder create() {
				return new Builder();
			}

			public Builder clear() {
				super.clear();
				userTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000001);
				niceTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000002);
				systemTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000004);
				idleTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000008);
				ioWaitTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000010);
				irqTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000020);
				softIRQTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000040);
				cpuUtilization_ = 0F;
				bitField0_ = (bitField0_ & ~0x00000080);
				ioUtilization_ = 0F;
				bitField0_ = (bitField0_ & ~0x00000100);
				cpuTime_ = 0L;
				bitField0_ = (bitField0_ & ~0x00000200);
				cpuNumber_ = 0;
				bitField0_ = (bitField0_ & ~0x00000400);
				offLine_ = false;
				bitField0_ = (bitField0_ & ~0x00000800);
				return this;
			}

			public Builder clone() {
				return create().mergeFrom(buildPartial());
			}

			public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
				return ets.genielog.appwatcher_3.profiling.model.CpuInfo.internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor;
			}

			public ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo getDefaultInstanceForType() {
				return ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo.getDefaultInstance();
			}

			public ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo build() {
				ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo result = buildPartial();
				if (!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}

			public ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo buildPartial() {
				ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo result = new ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo(
						this);
				int from_bitField0_ = bitField0_;
				int to_bitField0_ = 0;
				if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
					to_bitField0_ |= 0x00000001;
				}
				result.userTime_ = userTime_;
				if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
					to_bitField0_ |= 0x00000002;
				}
				result.niceTime_ = niceTime_;
				if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
					to_bitField0_ |= 0x00000004;
				}
				result.systemTime_ = systemTime_;
				if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
					to_bitField0_ |= 0x00000008;
				}
				result.idleTime_ = idleTime_;
				if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
					to_bitField0_ |= 0x00000010;
				}
				result.ioWaitTime_ = ioWaitTime_;
				if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
					to_bitField0_ |= 0x00000020;
				}
				result.irqTime_ = irqTime_;
				if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
					to_bitField0_ |= 0x00000040;
				}
				result.softIRQTime_ = softIRQTime_;
				if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
					to_bitField0_ |= 0x00000080;
				}
				result.cpuUtilization_ = cpuUtilization_;
				if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
					to_bitField0_ |= 0x00000100;
				}
				result.ioUtilization_ = ioUtilization_;
				if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
					to_bitField0_ |= 0x00000200;
				}
				result.cpuTime_ = cpuTime_;
				if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
					to_bitField0_ |= 0x00000400;
				}
				result.cpuNumber_ = cpuNumber_;
				if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
					to_bitField0_ |= 0x00000800;
				}
				result.offLine_ = offLine_;
				result.bitField0_ = to_bitField0_;
				onBuilt();
				return result;
			}

			public Builder mergeFrom(com.google.protobuf.Message other) {
				if (other instanceof ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo) {
					return mergeFrom((ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}

			public Builder mergeFrom(ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo other) {
				if (other == ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo
						.getDefaultInstance())
					return this;
				if (other.hasUserTime()) {
					setUserTime(other.getUserTime());
				}
				if (other.hasNiceTime()) {
					setNiceTime(other.getNiceTime());
				}
				if (other.hasSystemTime()) {
					setSystemTime(other.getSystemTime());
				}
				if (other.hasIdleTime()) {
					setIdleTime(other.getIdleTime());
				}
				if (other.hasIoWaitTime()) {
					setIoWaitTime(other.getIoWaitTime());
				}
				if (other.hasIrqTime()) {
					setIrqTime(other.getIrqTime());
				}
				if (other.hasSoftIRQTime()) {
					setSoftIRQTime(other.getSoftIRQTime());
				}
				if (other.hasCpuUtilization()) {
					setCpuUtilization(other.getCpuUtilization());
				}
				if (other.hasIoUtilization()) {
					setIoUtilization(other.getIoUtilization());
				}
				if (other.hasCpuTime()) {
					setCpuTime(other.getCpuTime());
				}
				if (other.hasCpuNumber()) {
					setCpuNumber(other.getCpuNumber());
				}
				if (other.hasOffLine()) {
					setOffLine(other.getOffLine());
				}
				this.mergeUnknownFields(other.getUnknownFields());
				return this;
			}

			public final boolean isInitialized() {
				if (!hasUserTime()) {

					return false;
				}
				if (!hasNiceTime()) {

					return false;
				}
				if (!hasSystemTime()) {

					return false;
				}
				if (!hasIdleTime()) {

					return false;
				}
				if (!hasIoWaitTime()) {

					return false;
				}
				if (!hasIrqTime()) {

					return false;
				}
				if (!hasSoftIRQTime()) {

					return false;
				}
				if (!hasCpuUtilization()) {

					return false;
				}
				if (!hasIoUtilization()) {

					return false;
				}
				if (!hasCpuTime()) {

					return false;
				}
				return true;
			}

			public Builder mergeFrom(
					com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry)
					throws java.io.IOException {
				ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input,
							extensionRegistry);
				} catch (com.google.protobuf.InvalidProtocolBufferException e) {
					parsedMessage = (ets.genielog.appwatcher_3.profiling.model.CpuInfo.cpuInfo) e
							.getUnfinishedMessage();
					throw e;
				} finally {
					if (parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}

			private int bitField0_;

			// required uint64 userTime = 1;
			private long userTime_;

			/**
			 * <code>required uint64 userTime = 1;</code>
			 * 
			 * <pre>
			 * * normal processes executing in user mode
			 * </pre>
			 */
			public boolean hasUserTime() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}

			/**
			 * <code>required uint64 userTime = 1;</code>
			 * 
			 * <pre>
			 * * normal processes executing in user mode
			 * </pre>
			 */
			public long getUserTime() {
				return userTime_;
			}

			/**
			 * <code>required uint64 userTime = 1;</code>
			 * 
			 * <pre>
			 * * normal processes executing in user mode
			 * </pre>
			 */
			public Builder setUserTime(long value) {
				bitField0_ |= 0x00000001;
				userTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 userTime = 1;</code>
			 * 
			 * <pre>
			 * * normal processes executing in user mode
			 * </pre>
			 */
			public Builder clearUserTime() {
				bitField0_ = (bitField0_ & ~0x00000001);
				userTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 niceTime = 2;
			private long niceTime_;

			/**
			 * <code>required uint64 niceTime = 2;</code>
			 * 
			 * <pre>
			 * * niced processes executing in user mode
			 * </pre>
			 */
			public boolean hasNiceTime() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}

			/**
			 * <code>required uint64 niceTime = 2;</code>
			 * 
			 * <pre>
			 * * niced processes executing in user mode
			 * </pre>
			 */
			public long getNiceTime() {
				return niceTime_;
			}

			/**
			 * <code>required uint64 niceTime = 2;</code>
			 * 
			 * <pre>
			 * * niced processes executing in user mode
			 * </pre>
			 */
			public Builder setNiceTime(long value) {
				bitField0_ |= 0x00000002;
				niceTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 niceTime = 2;</code>
			 * 
			 * <pre>
			 * * niced processes executing in user mode
			 * </pre>
			 */
			public Builder clearNiceTime() {
				bitField0_ = (bitField0_ & ~0x00000002);
				niceTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 systemTime = 3;
			private long systemTime_;

			/**
			 * <code>required uint64 systemTime = 3;</code>
			 * 
			 * <pre>
			 * * processes executing in kernel mode
			 * </pre>
			 */
			public boolean hasSystemTime() {
				return ((bitField0_ & 0x00000004) == 0x00000004);
			}

			/**
			 * <code>required uint64 systemTime = 3;</code>
			 * 
			 * <pre>
			 * * processes executing in kernel mode
			 * </pre>
			 */
			public long getSystemTime() {
				return systemTime_;
			}

			/**
			 * <code>required uint64 systemTime = 3;</code>
			 * 
			 * <pre>
			 * * processes executing in kernel mode
			 * </pre>
			 */
			public Builder setSystemTime(long value) {
				bitField0_ |= 0x00000004;
				systemTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 systemTime = 3;</code>
			 * 
			 * <pre>
			 * * processes executing in kernel mode
			 * </pre>
			 */
			public Builder clearSystemTime() {
				bitField0_ = (bitField0_ & ~0x00000004);
				systemTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 idleTime = 4;
			private long idleTime_;

			/**
			 * <code>required uint64 idleTime = 4;</code>
			 * 
			 * <pre>
			 * * twiddling thumbs
			 * </pre>
			 */
			public boolean hasIdleTime() {
				return ((bitField0_ & 0x00000008) == 0x00000008);
			}

			/**
			 * <code>required uint64 idleTime = 4;</code>
			 * 
			 * <pre>
			 * * twiddling thumbs
			 * </pre>
			 */
			public long getIdleTime() {
				return idleTime_;
			}

			/**
			 * <code>required uint64 idleTime = 4;</code>
			 * 
			 * <pre>
			 * * twiddling thumbs
			 * </pre>
			 */
			public Builder setIdleTime(long value) {
				bitField0_ |= 0x00000008;
				idleTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 idleTime = 4;</code>
			 * 
			 * <pre>
			 * * twiddling thumbs
			 * </pre>
			 */
			public Builder clearIdleTime() {
				bitField0_ = (bitField0_ & ~0x00000008);
				idleTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 ioWaitTime = 5;
			private long ioWaitTime_;

			/**
			 * <code>required uint64 ioWaitTime = 5;</code>
			 * 
			 * <pre>
			 * * waiting for I/O to complete
			 * </pre>
			 */
			public boolean hasIoWaitTime() {
				return ((bitField0_ & 0x00000010) == 0x00000010);
			}

			/**
			 * <code>required uint64 ioWaitTime = 5;</code>
			 * 
			 * <pre>
			 * * waiting for I/O to complete
			 * </pre>
			 */
			public long getIoWaitTime() {
				return ioWaitTime_;
			}

			/**
			 * <code>required uint64 ioWaitTime = 5;</code>
			 * 
			 * <pre>
			 * * waiting for I/O to complete
			 * </pre>
			 */
			public Builder setIoWaitTime(long value) {
				bitField0_ |= 0x00000010;
				ioWaitTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 ioWaitTime = 5;</code>
			 * 
			 * <pre>
			 * * waiting for I/O to complete
			 * </pre>
			 */
			public Builder clearIoWaitTime() {
				bitField0_ = (bitField0_ & ~0x00000010);
				ioWaitTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 irqTime = 6;
			private long irqTime_;

			/**
			 * <code>required uint64 irqTime = 6;</code>
			 * 
			 * <pre>
			 * * servicing interrupts
			 * </pre>
			 */
			public boolean hasIrqTime() {
				return ((bitField0_ & 0x00000020) == 0x00000020);
			}

			/**
			 * <code>required uint64 irqTime = 6;</code>
			 * 
			 * <pre>
			 * * servicing interrupts
			 * </pre>
			 */
			public long getIrqTime() {
				return irqTime_;
			}

			/**
			 * <code>required uint64 irqTime = 6;</code>
			 * 
			 * <pre>
			 * * servicing interrupts
			 * </pre>
			 */
			public Builder setIrqTime(long value) {
				bitField0_ |= 0x00000020;
				irqTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 irqTime = 6;</code>
			 * 
			 * <pre>
			 * * servicing interrupts
			 * </pre>
			 */
			public Builder clearIrqTime() {
				bitField0_ = (bitField0_ & ~0x00000020);
				irqTime_ = 0L;
				onChanged();
				return this;
			}

			// required uint64 softIRQTime = 7;
			private long softIRQTime_;

			/**
			 * <code>required uint64 softIRQTime = 7;</code>
			 * 
			 * <pre>
			 * * servicing softirqs
			 * </pre>
			 */
			public boolean hasSoftIRQTime() {
				return ((bitField0_ & 0x00000040) == 0x00000040);
			}

			/**
			 * <code>required uint64 softIRQTime = 7;</code>
			 * 
			 * <pre>
			 * * servicing softirqs
			 * </pre>
			 */
			public long getSoftIRQTime() {
				return softIRQTime_;
			}

			/**
			 * <code>required uint64 softIRQTime = 7;</code>
			 * 
			 * <pre>
			 * * servicing softirqs
			 * </pre>
			 */
			public Builder setSoftIRQTime(long value) {
				bitField0_ |= 0x00000040;
				softIRQTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 softIRQTime = 7;</code>
			 * 
			 * <pre>
			 * * servicing softirqs
			 * </pre>
			 */
			public Builder clearSoftIRQTime() {
				bitField0_ = (bitField0_ & ~0x00000040);
				softIRQTime_ = 0L;
				onChanged();
				return this;
			}

			// required float cpuUtilization = 8;
			private float cpuUtilization_;

			/**
			 * <code>required float cpuUtilization = 8;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public boolean hasCpuUtilization() {
				return ((bitField0_ & 0x00000080) == 0x00000080);
			}

			/**
			 * <code>required float cpuUtilization = 8;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public float getCpuUtilization() {
				return cpuUtilization_;
			}

			/**
			 * <code>required float cpuUtilization = 8;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public Builder setCpuUtilization(float value) {
				bitField0_ |= 0x00000080;
				cpuUtilization_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required float cpuUtilization = 8;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public Builder clearCpuUtilization() {
				bitField0_ = (bitField0_ & ~0x00000080);
				cpuUtilization_ = 0F;
				onChanged();
				return this;
			}

			// required float IoUtilization = 9;
			private float ioUtilization_;

			/**
			 * <code>required float IoUtilization = 9;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public boolean hasIoUtilization() {
				return ((bitField0_ & 0x00000100) == 0x00000100);
			}

			/**
			 * <code>required float IoUtilization = 9;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public float getIoUtilization() {
				return ioUtilization_;
			}

			/**
			 * <code>required float IoUtilization = 9;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public Builder setIoUtilization(float value) {
				bitField0_ |= 0x00000100;
				ioUtilization_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required float IoUtilization = 9;</code>
			 * 
			 * <pre>
			 * * CPU utilization
			 * </pre>
			 */
			public Builder clearIoUtilization() {
				bitField0_ = (bitField0_ & ~0x00000100);
				ioUtilization_ = 0F;
				onChanged();
				return this;
			}

			// required uint64 cpuTime = 10;
			private long cpuTime_;

			/**
			 * <code>required uint64 cpuTime = 10;</code>
			 * 
			 * <pre>
			 * * CPU Time
			 * </pre>
			 */
			public boolean hasCpuTime() {
				return ((bitField0_ & 0x00000200) == 0x00000200);
			}

			/**
			 * <code>required uint64 cpuTime = 10;</code>
			 * 
			 * <pre>
			 * * CPU Time
			 * </pre>
			 */
			public long getCpuTime() {
				return cpuTime_;
			}

			/**
			 * <code>required uint64 cpuTime = 10;</code>
			 * 
			 * <pre>
			 * * CPU Time
			 * </pre>
			 */
			public Builder setCpuTime(long value) {
				bitField0_ |= 0x00000200;
				cpuTime_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint64 cpuTime = 10;</code>
			 * 
			 * <pre>
			 * * CPU Time
			 * </pre>
			 */
			public Builder clearCpuTime() {
				bitField0_ = (bitField0_ & ~0x00000200);
				cpuTime_ = 0L;
				onChanged();
				return this;
			}

			// optional uint32 cpuNumber = 11;
			private int cpuNumber_;

			/**
			 * <code>optional uint32 cpuNumber = 11;</code>
			 * 
			 * <pre>
			 * * CPU Number
			 * </pre>
			 */
			public boolean hasCpuNumber() {
				return ((bitField0_ & 0x00000400) == 0x00000400);
			}

			/**
			 * <code>optional uint32 cpuNumber = 11;</code>
			 * 
			 * <pre>
			 * * CPU Number
			 * </pre>
			 */
			public int getCpuNumber() {
				return cpuNumber_;
			}

			/**
			 * <code>optional uint32 cpuNumber = 11;</code>
			 * 
			 * <pre>
			 * * CPU Number
			 * </pre>
			 */
			public Builder setCpuNumber(int value) {
				bitField0_ |= 0x00000400;
				cpuNumber_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>optional uint32 cpuNumber = 11;</code>
			 * 
			 * <pre>
			 * * CPU Number
			 * </pre>
			 */
			public Builder clearCpuNumber() {
				bitField0_ = (bitField0_ & ~0x00000400);
				cpuNumber_ = 0;
				onChanged();
				return this;
			}

			// optional bool offLine = 12;
			private boolean offLine_;

			/**
			 * <code>optional bool offLine = 12;</code>
			 * 
			 * <pre>
			 * * CPU Offline
			 * </pre>
			 */
			public boolean hasOffLine() {
				return ((bitField0_ & 0x00000800) == 0x00000800);
			}

			/**
			 * <code>optional bool offLine = 12;</code>
			 * 
			 * <pre>
			 * * CPU Offline
			 * </pre>
			 */
			public boolean getOffLine() {
				return offLine_;
			}

			/**
			 * <code>optional bool offLine = 12;</code>
			 * 
			 * <pre>
			 * * CPU Offline
			 * </pre>
			 */
			public Builder setOffLine(boolean value) {
				bitField0_ |= 0x00000800;
				offLine_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>optional bool offLine = 12;</code>
			 * 
			 * <pre>
			 * * CPU Offline
			 * </pre>
			 */
			public Builder clearOffLine() {
				bitField0_ = (bitField0_ & ~0x00000800);
				offLine_ = false;
				onChanged();
				return this;
			}

			// @@protoc_insertion_point(builder_scope:com.android.alexdet.profiler.core.cpuInfo)
		}

		static {
			defaultInstance = new cpuInfo(true);
			defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:com.android.alexdet.profiler.core.cpuInfo)
	}

	private static com.google.protobuf.Descriptors.Descriptor internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor;
	private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_com_android_alexdet_profiler_core_cpuInfo_fieldAccessorTable;

	public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
		return descriptor;
	}

	private static com.google.protobuf.Descriptors.FileDescriptor descriptor;
	static {
		java.lang.String[] descriptorData = { "\n\rcpuInfo.proto\022!com.android.alexdet.pro"
				+ "filer.core\"\361\001\n\007cpuInfo\022\020\n\010userTime\030\001 \002(\004"
				+ "\022\020\n\010niceTime\030\002 \002(\004\022\022\n\nsystemTime\030\003 \002(\004\022\020"
				+ "\n\010idleTime\030\004 \002(\004\022\022\n\nioWaitTime\030\005 \002(\004\022\017\n\007"
				+ "irqTime\030\006 \002(\004\022\023\n\013softIRQTime\030\007 \002(\004\022\026\n\016cp"
				+ "uUtilization\030\010 \002(\002\022\025\n\rIoUtilization\030\t \002("
				+ "\002\022\017\n\007cpuTime\030\n \002(\004\022\021\n\tcpuNumber\030\013 \001(\r\022\017\n"
				+ "\007offLine\030\014 \001(\010" };
		com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
			public com.google.protobuf.ExtensionRegistry assignDescriptors(
					com.google.protobuf.Descriptors.FileDescriptor root) {
				descriptor = root;
				internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor = getDescriptor()
						.getMessageTypes().get(0);
				internal_static_com_android_alexdet_profiler_core_cpuInfo_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
						internal_static_com_android_alexdet_profiler_core_cpuInfo_descriptor,
						new java.lang.String[] { "UserTime", "NiceTime",
								"SystemTime", "IdleTime", "IoWaitTime",
								"IrqTime", "SoftIRQTime", "CpuUtilization",
								"IoUtilization", "CpuTime", "CpuNumber",
								"OffLine", });
				return null;
			}
		};
		com.google.protobuf.Descriptors.FileDescriptor
				.internalBuildGeneratedFileFrom(
						descriptorData,
						new com.google.protobuf.Descriptors.FileDescriptor[] {},
						assigner);
	}

	// @@protoc_insertion_point(outer_class_scope)
}
